<snippet>
	<content><![CDATA[
//store it in a variable (i start from 1)
#define GET_BIT(n,i) ((n & (1LL << ((i)-1))) >> ((i)-1))
#define SET_BIT(n,i) ((n) | (1LL << ((i)-1)))
#define CLR_BIT(n,i) ((n) & ~(1LL << ((i)-1)))
#define TGL_BIT(n,i) ((n) ^ (1LL << ((i)-1)))
#define CLR_MSB(n,i) ((n) & (1LL << ((i)-1))-1)//upto i+1 pos
#define CLR_LSB(n,i) ((n) & ~((1LL << (i))-1))//ipto i pos
int firstSetMSB(int n){
    return 32-(__builtin_clz(n));//32 for int, 64 for ll and clzll
}  
int firstSetLSB(int n){
    return log2(n & -n)+1;
}     
bool isPowerOfTwo(int n) {
    return  ((n & (n - 1)) == 0);
}
bool isPowerOf_2k(int n,int k) {
    return  (isPowerOfTwo(n) && (n%(k-1)==1)); //returns true if n=power of 2^k
}
void printBinary(int n){
    for(int i=31; i>=0; i--)
        cout<<((n>>i) & 1);
    cout<<endl;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>bit_manipulation</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
