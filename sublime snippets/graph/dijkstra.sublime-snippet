<snippet>
	<content><![CDATA[
const int N=1e6+10;
priority_queue<pair<int, int>> q;
vector<pair<int,int> > g[N];
vector<int> dist(N,INF);
vector<int> p(N,-1);

void go(int dest){
    if(p[dest]!=dest){
        go(p[dest]);
        cout<<"->";
    }
    cout<<dest;
}

void initialize_single_source(int n, int s){
    for(int i=0;i<n;i++){
        dist[i] = INF;
        p[i] = i;
    }
    dist[s] = 0;
}

void relax(int parent,int child,int weight){
    if(dist[parent]+weight < dist[child]){
        dist[child]=dist[parent]+weight;
        p[child]=parent;
        q.push(make_pair(dist[child],child));
    }
}

void dijkstra(int source,int node)
{
    initialize_single_source(node,source);
    q.push(make_pair(0, source));
    while(!q.empty()){
        auto u=q.top();
        q.pop();
        int parent=u.second;
        for(auto v:g[parent]){
            int child=v.first;
            int weight=v.second;
            relax(parent,child,weight);
        }
    }
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>dijkstra</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
