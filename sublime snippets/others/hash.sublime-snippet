<snippet>
	<content><![CDATA[
const int N = 1e6+10;
const ll m= 1000000007;
ll BASE = 129;
ll POW[N];
ll IPOW[N];
 
ll power(ll a, ll p, ll m) {
    ll ans = 1;
    a %= m;
    while (p) {
        if (p & 1ll)
            ans = (ans*a) % m;
        p >>= 1ll;
        a = (a*a) % m;
    }
    return ans;
}
 
void hash_pre() {
    POW[0] = 1;
    IPOW[0] = 1;
    ll inv = power(BASE, m-2, m);
    for (ll j = 1; j < N; ++j) {
        POW[j] = (POW[j-1] * BASE) % m;
        IPOW[j] = (IPOW[j-1] * inv) % m;
    }
}
 
template<typename T> struct Hash {
    int n;
    T s;
    vector<ll> h;
    Hash() {}
    Hash(T s) : s(s) {
        n = s.size();
        h.resize(n+1);

        h[0] = 0;
        for (int i = 1; i <= n; ++i) {
            h[i] = (h[i-1] + (s[i-1] * POW[i]) % m) % m;
        }
    }

    ll get_hash(int l, int r) {
        ++l; ++r;
        return ((h[r] - h[l-1] + m) * IPOW[l]) % m;
    }

    ll merge_hash(int l1, int r1, int l2, int r2) {
        assert((0 <= l1) && (l1 <= r1) && (r1 < l2) && (l2 <= r2) && (r2 < n));
        ll p1 = get_hash(l1, r1);
        ll p2 = get_hash(l2, r2);
        int len = r1-l1+1;
        return (p1 + (p2 * POW[len]) % m) % m;
    }
};
/*
hash_pre();                     use it to calculate powers
Hash<string> hs(s);       pre compute hash of full string
hs.get_hash(0,i-1);             get hash of a sub string
hs.merge_hash(0,i-1,i,n-1);     get & merge hash of teo sub string
*/
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hash</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
