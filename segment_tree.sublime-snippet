<snippet>
	<content><![CDATA[
#define N 10000007
#define rep(i,n) for(int i=1;i<=n;i++)
//build(1,1,n)  build the tree from 1 to n
//query(1,1,n,a,b)  query in a to b range for 1 to n array
//update(1,1,n,x,v) update xth node with value v for 1 to n array
//everything o(4*logN)
int ara[N],tree[4*N];
void build(int node,int b,int e)//node,begin,end
{
    if(b==e){
        tree[node]=ara[b];
        return;
    }
    int left=node*2;
    int right=node*2+1;
    int mid=(b+e)/2;
    build(left,b,mid);
    build(right,mid+1,e);
    tree[node]=tree[left]+tree[right];//change accordingly
}
int query(int node,int b,int e,int i,int j)//node,begin,end,range of query(i,j)
{
    if(i>e || j<b)
        return 0;//return something that doesnt effect the result
    if(b>=i && e<=j)
        return tree[node];
    int left=node*2;
    int right=node*2+1;
    int mid=(b+e)/2;
    int p1=query(left,b,mid,i,j);
    int p2=query(right,mid+1,e,i,j);
    return p1+p2;//change accordingly
}
void update(int node,int b,int e,int i,int value)//node,begin,end,updating(position,value)
{
    if(i>e || i<b)
        return;
    if(b>=i && e<=i){
        tree[node]=value;
        return;
    }
    int left=node*2;
    int right=node*2+1;
    int mid=(b+e)/2;
    update(left,b,mid,i,value);
    update(right,mid+1,e,i,value);
    tree[node]=tree[left]+tree[right];//change accordingly
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segment_tree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
